"use client";

import { useForm } from "react-hook-form";
import { useState, useTransition } from "react";
import styles from "./register.module.css";
import { registerUser } from "@/lib/actions/registerUser";

type FormData = {
  name: string;
  phone: string;
  password: string;
  confirmPassword: string;
};

export default function RegisterPage() {
  const {
    register,
    handleSubmit,
    setError,
    getValues,
    formState: { errors },
  } = useForm<FormData>({ mode: "onBlur" });

  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [isPending, startTransition] = useTransition();

  const onSubmit = (data: FormData) => {
    startTransition(async () => {
      const result = await registerUser(
        data.name.toLowerCase(),
        data.phone,
        data.password
      );

      if (result?.error) {
        if (result.error.includes("—Ç–µ–ª–µ—Ñ–æ–Ω")) {
          setError("phone", { message: result.error });
        } else {
          alert(result.error);
        }
      } else {
        alert("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω");
      }
    });
  };

  return (
    <main className={styles.container}>
      <img className={styles.logo} src="/logo.png" alt="Logo" />
      <h1>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h1>
      <form className={styles.form} onSubmit={handleSubmit(onSubmit)}>
        <input
          className={styles.input}
          type="text"
          placeholder="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
          autoComplete="username"
          {...register("name", {
            required: "–í–≤–µ–¥–∏—Ç–µ –∏–º—è",
            minLength: { value: 4, message: "–ú–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞" },
            maxLength: { value: 10, message: "–ú–∞–∫—Å–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤" },
            pattern: {
              value: /^[A-Za-z0-9_]+$/,
              message: "–¢–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏–ª–∏ _",
            },
          })}
        />
        {errors.name && <p>{errors.name.message}</p>}

        <input
          className={styles.input}
          type="tel"
          placeholder="+7-(123)-456-78-99"
          {...register("phone", {
            required: "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
          })}
        />
        {errors.phone && <p>{errors.phone.message}</p>}

        <div className={styles.passwordField}>
          <input
            className={styles.input}
            type={showPassword ? "text" : "password"}
            placeholder="–ü–∞—Ä–æ–ª—å"
            autoComplete="new-password"
            {...register("password", {
              required: "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å",
              minLength: { value: 6, message: "–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤" },
              maxLength: { value: 12, message: "–ú–∞–∫—Å–∏–º—É–º 12 —Å–∏–º–≤–æ–ª–æ–≤" },
              pattern: {
                value: /^[A-Za-z0-9]+$/,
                message: "–¢–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã –∏–ª–∏ —Ü–∏—Ñ—Ä—ã",
              },
            })}
          />
          <button
            type="button"
            className={styles.eyeButton}
            onClick={() => setShowPassword((prev) => !prev)}
          >
            {showPassword ? "üôà" : "üëÅÔ∏è"}
          </button>
        </div>
        {errors.password && <p>{errors.password.message}</p>}

        <div className={styles.passwordField}>
          <input
            className={styles.input}
            type={showConfirmPassword ? "text" : "password"}
            placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
            {...register("confirmPassword", {
              required: "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å",
              validate: (value) =>
                value === getValues("password") || "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç",
            })}
          />
          <button
            type="button"
            className={styles.eyeButton}
            onClick={() => setShowConfirmPassword((prev) => !prev)}
          >
            {showConfirmPassword ? "üôà" : "üëÅÔ∏è"}
          </button>
        </div>
        {errors.confirmPassword && <p>{errors.confirmPassword.message}</p>}

        <button className={styles.button} type="submit" disabled={isPending}>
          {isPending ? "–°–æ–∑–¥–∞–Ω–∏–µ..." : "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"}
        </button>
      </form>
    </main>
  );
}
